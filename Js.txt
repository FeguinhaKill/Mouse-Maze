const canvas = document.getElementById('mazeCanvas');
const ctx = canvas.getContext('2d');

// Labyrinth design (1: wall, 0: path)
const labyrinth = [
    [1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1],
];

// Tile settings
const tileSize = 75; // Each cell is 75x75 pixels

// Draw labyrinth
function drawLabyrinth() {
    for (let row = 0; row < labyrinth.length; row++) {
        for (let col = 0; col < labyrinth[row].length; col++) {
            if (labyrinth[row][col] === 1) {
                ctx.fillStyle = 'black';
                ctx.fillRect(col * tileSize, row * tileSize, tileSize, tileSize);
            } else {
                ctx.fillStyle = 'white';
                ctx.fillRect(col * tileSize, row * tileSize, tileSize, tileSize);
            }
        }
    }
}

// Track mouse position
let mouseX = 0;
let mouseY = 0;

canvas.addEventListener('mousemove', (event) => {
    const rect = canvas.getBoundingClientRect();
    mouseX = event.clientX - rect.left;
    mouseY = event.clientY - rect.top;

    // Check if mouse hits a wall
    const col = Math.floor(mouseX / tileSize);
    const row = Math.floor(mouseY / tileSize);

    if (labyrinth[row][col] === 1) {
        alert("You hit a wall! Game over.");
        mouseX = 0; // Reset position (optional)
        mouseY = 0; // Reset position (optional)
    }
});

// Start game
drawLabyrinth();
